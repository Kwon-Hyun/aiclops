img 폴더 안에 보라색 원을 직접 촬영한 데이터셋들이 있고, albumentation을 이용하여 image augmentation까지 완료해서 그 augmentation된 데이터셋은 output_folder 안에 들어있는 상태야. 총 300개의 이미지가 들어가있고, 이 이미지들을 가지고 학습을 진행해서 테스트 이미지에 적용하여 원을 추출하는 것이 최종 목표야.

원을 추출하는 방법은 다음과 같아.
1. augmentation되어 있는 보라색 원 이미지 데이터셋들을 trainingset으로 활용할거야. 각 이미지마다 1pixel 단위로 쪼개어서 이미지의 왼쪽 상단부터 우측 하단으로 하나씩 확인하면서, 그 pixel의 색상값을 활용하여 보라색이 있는 모든 pixel의 임계값을 파악하고, 전체 training set들로부터 최적의 threshold값을 뽑아내는거야. 이때, training set은 RGB 3차원의 색상값을 가지기 때문에 pixel로 쪼개기 어려우니, 흑백으로 전환하여 명도에 따라 보라색 원이 있는 범위를 찾아내는거야. 이전에 보라색 자체의 RGB 색상 범위는 구한 적이 있는데, 여기서는 흑백으로 전환해서 명도를 활용할거니까 그건 나중에 필요하면 알려줘.

2. 각 이미지당 pixel 단위로 쪼개어서 보라색 원이 있는 부분의 적정 임계값들을 다 파악했다면, 설정한 최적의 threshold값을 넘는 경우에 보라색 원이 있는 pixel로, 넘지 않는다면 무시해도 되는 pixel로 간주해. 이때, Machine Learning은 비지도학습 방법인 K-means 방법을 이용해서 보라색 pixel을 탐지하고 해당 방법을 학습하도록 할거야. 그래서 보라색 원의 일부가 있는 Pixel로 파악된 pixel들을 다시 하나하나 순서대로 모아서, 3차원의 RGB값을 갖는 이미지로 복원하는거야. 

3. 보라색 원이 있다고 파악된 pixel값들만 모아서 다시 합친 흑백 이미지를 다시 3차원의 RGB 이미지로 복원했다면, 이를 더 정확한 원으로 탐지하기 위해 이제서야 허프변환을 활용해.

4. 그리고 그 허프변환되어 나온 원 결과에 더욱 완벽한 원형이 되도록 calibration을 진행해. 그리고 완벽한 원형이 됐다고 파악되면 그 원에 외곽사각형을 그려서 가로, 세로 pixel 크기를 구해서 원의 크기를 이미지 상에 출력되도록 할거야.


machine learning을 활용한다는 게 가장 중요한 포인트임을 알고 위 방법으로 다시 코드를 제공하고 설명을 덧붙여줘.